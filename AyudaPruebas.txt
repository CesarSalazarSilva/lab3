/*
	codigo compilacion
	gcc -Wall x.c -o x -lm

*/


lista.c
/*  
	printf("Nuevo Antes f de %d\n",largoL(&x));
	imprimir(x);
	eliminarIL(&x);
	printf("Nuevo Despues f de %d\n",largoL(&x));
	imprimir(x);
	printf("\n");

	printf("Nuevo Antes f de %d\n",largoL(&x));
	imprimir(x);
	eliminarFL(&x);
	printf("Nuevo Despues f de %d\n",largoL(&x));
	imprimir(x);
	printf("\n");

	printf("Nuevo Antes swap de %d\n",largoL(&x));
	imprimir(x);
	swapnodosL(&x, 1);
	printf("Nuevo Despues swap de %d\n",largoL(&x));
	imprimir(x);
	printf("\n");

	printf("Nuevo Antes swap de %d\n",largoL(&x));
	imprimir(x);
	ordenarMayorMenorDatoL(&x);
	printf("Nuevo Despues swap de %d\n",largoL(&x));
	imprimir(x);
	printf("\n");
----	
----
	Lista * x = crearNL();
	Lista * y = crearNL();
	Lista * z = crearNL();
	x->dato = 7;
	x->dato2 =17; 
	x->sig = y;

	y->dato = 4;
	y->dato2 = 14; 
	y->sig = z;

	z->dato = 5;
	z->dato2 =15; 
	z->sig = NULL;

	Lista * nuevo = crearNL();
	nuevo->dato = 4;
	nuevo->dato2 = 14;

	Lista * nuevo2 = crearNL();
	nuevo2->dato = 3;
	nuevo2->dato2 = 13;
	
	printf("Nuevo Antes i de %d\n",largoL(&x));
	imprimir(x);
	insertarIL(&x, nuevo);
	printf("Nuevo Despues i de %d\n",largoL(&x));
	imprimir(x);
	printf("\n");

	printf("Nuevo Antes f de %d\n",largoL(&x));
	imprimir(x);
	insertarFL(&x,nuevo2);
	printf("Nuevo Despues f de %d\n",largoL(&x));
	imprimir(x);
	printf("\n");

	printf("Nuevo Antes ordenar %d\n",largoL(&x));
	imprimir(x);
	ordenarMayorMenorDatoL(&x);
	printf("Nuevo Despues ordenar %d\n",largoL(&x));
	imprimir(x);
	printf("\n");
	*/

lab.c
/*  struct Lista  x,y,z,m;
	x.dato =1;
	x.dato2 =11; 
	x.sig =&y;

	y.dato =2;
	y.dato2 =12; 
	y.sig =&z;

	z.dato =3;
	z.dato2 =13; 
	z.sig = NULL;
	imprimirNL(&x);
	printf("Again\n");
	imprimirNL(&x);

	m.dato =7;
	m.dato2 =7; 
	m.sig = NULL;

	struct Lista * nueva;
	nueva = insertarNL(&x,0,&m);
	printf("Nueva 0 \n");
	imprimirNL(nueva);

	nueva = insertarNL(&x,1,&m);
	printf("Nueva 1 \n");
	imprimirNL(nueva);

	nueva = insertarNL(&x,2,&m);
	printf("Nueva 0 \n");
	imprimirNL(nueva); 
	*/
----
----
	//Funcionalidad 1, listar los puntos de entrega de mayor a menor.
	void OrdenDeNodosPorPeso(struct nodo * listadeNodos, int cantidadNodos){

		//Creamos un arreglo para guardar la cantidad de nodos vecinos por nodo.
		int ** cantidadDeNodosVecinos = (int**)malloc(sizeof(int*)*cantidadNodos);
		//Asignamos memoria para el arreglo con posiciones, 0 = cantidad de nodos, 1 = id del nodo.
		for (int i = 0; i < cantidadNodos; ++i){
			cantidadDeNodosVecinos[i] = (int*)malloc(sizeof(int)*2);
		}
		//Rellenamos el arreglo con los datos correspondientes.
		struct nodo * auxiliar = listadeNodos;
	    for(int i=0;i< cantidadNodos;i++){	
	    	cantidadDeNodosVecinos[i][1] = i;
	        cantidadDeNodosVecinos[i][0] = LargoListaNV(auxiliar->sigV);
	        auxiliar = auxiliar->sig;
	    }
	    //Ordenamos el arreglo de mayor a menor, por relaciones con nodos vecinos.


	    //Tenemos el arreglo listo lo imprimimos
	    for(int i=0;i<cantidadNodos;i++){	
	    	printf("id = %d, veces que se repite = %d.\n", cantidadDeNodosVecinos[i][1],cantidadDeNodosVecinos[i][0]);
	   
	    }
	}
	*/